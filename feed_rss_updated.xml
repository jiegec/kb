<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>Jiegec&#39;s Knowledge Base</title><description>Knowledge Base of @jiegec</description><link>https://jia.je/kb/</link><atom:link href="https://jia.je/kb/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/jiegec/kb</docs><language>en</language> <pubDate>Thu, 10 Jul 2025 02:54:06 -0000</pubDate> <lastBuildDate>Thu, 10 Jul 2025 02:54:06 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.17.3</generator> <image> <url>None</url> <title>Jiegec's Knowledge Base</title><link>https://jia.je/kb/</link> </image> <item> <title>Transformer</title> <description>&lt;h1&gt;Transformer&lt;/h1&gt;&lt;p&gt;下面只考虑 Decoder-only 的 Transformer。&lt;/p&gt;&lt;h2&gt;计算过程&lt;/h2&gt;&lt;p&gt;输入 $n$ 个 Token，通过 Text 和 Position Embedding 后，得到一个尺寸为 $(n, d_{model})$ 的矩阵，其中 $d_{model}$ 为 Embedd...&lt;/p&gt;</description><link>https://jia.je/kb/software/transformer.html</link> <pubDate>Tue, 08 Jul 2025 17:01:52 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/software/transformer.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/transformer.png" type="image/png" length="34679" /> </item> <item> <title>Transformer</title> <description>&lt;h1&gt;Transformer&lt;/h1&gt;&lt;p&gt;下面只考虑 Decoder-only 的 Transformer。&lt;/p&gt;&lt;h2&gt;计算过程&lt;/h2&gt;&lt;p&gt;输入 $n$ 个 Token，通过 Text 和 Position Embedding 后，得到一个尺寸为 $(n, d_{model})$ 的矩阵，其中 $d_{model}$ 为 Embedd...&lt;/p&gt;</description><link>https://jia.je/kb/en/software/transformer.html</link> <pubDate>Tue, 08 Jul 2025 17:01:52 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/en/software/transformer.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/transformer.png" type="image/png" length="32950" /> </item> <item> <title>Transformer</title> <description>&lt;h1&gt;Transformer&lt;/h1&gt;&lt;p&gt;下面只考虑 Decoder-only 的 Transformer。&lt;/p&gt;&lt;h2&gt;计算过程&lt;/h2&gt;&lt;p&gt;输入 $n$ 个 Token，通过 Text 和 Position Embedding 后，得到一个尺寸为 $(n, d_{model})$ 的矩阵，其中 $d_{model}$ 为 Embedd...&lt;/p&gt;</description><link>https://jia.je/kb/software/transformer.html</link> <pubDate>Tue, 08 Jul 2025 17:01:52 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/software/transformer.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/transformer.png" type="image/png" length="34679" /> </item> <item> <title>Montgomery 模乘</title> <description>&lt;h1&gt;Montgomery 模乘&lt;/h1&gt;&lt;p&gt;本文同步发布到本人的&lt;a href=&#34;https://zhuanlan.zhihu.com/p/645428404&#34;&gt;知乎&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;在密码学中，经常会涉及到模乘操作：$a * b \bmod N$。朴素的实现方法是，先求出 $a * b$，再对 N 进行除法，那么余数就是模乘的结果。...&lt;/p&gt;</description><link>https://jia.je/kb/cryptography/montgomery_mul_mod.html</link> <pubDate>Tue, 08 Jul 2025 14:26:54 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/cryptography/montgomery_mul_mod.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/cryptography/montgomery_mul_mod.png" type="image/png" length="43454" /> </item> <item> <title>Montgomery 模乘</title> <description>&lt;h1&gt;Montgomery 模乘&lt;/h1&gt;&lt;p&gt;本文同步发布到本人的&lt;a href=&#34;https://zhuanlan.zhihu.com/p/645428404&#34;&gt;知乎&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;在密码学中，经常会涉及到模乘操作：$a * b \bmod N$。朴素的实现方法是，先求出 $a * b$，再对 N 进行除法，那么余数就是模乘的结果。...&lt;/p&gt;</description><link>https://jia.je/kb/en/cryptography/montgomery_mul_mod.html</link> <pubDate>Tue, 08 Jul 2025 14:26:54 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/en/cryptography/montgomery_mul_mod.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/cryptography/montgomery_mul_mod.png" type="image/png" length="41866" /> </item> <item> <title>Montgomery 模乘</title> <description>&lt;h1&gt;Montgomery 模乘&lt;/h1&gt;&lt;p&gt;本文同步发布到本人的&lt;a href=&#34;https://zhuanlan.zhihu.com/p/645428404&#34;&gt;知乎&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;背景&lt;/h2&gt;&lt;p&gt;在密码学中，经常会涉及到模乘操作：$a * b \bmod N$。朴素的实现方法是，先求出 $a * b$，再对 N 进行除法，那么余数就是模乘的结果。...&lt;/p&gt;</description><link>https://jia.je/kb/cryptography/montgomery_mul_mod.html</link> <pubDate>Tue, 08 Jul 2025 14:26:54 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/cryptography/montgomery_mul_mod.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/cryptography/montgomery_mul_mod.png" type="image/png" length="43454" /> </item> <item> <title>缓存替换策略</title> <description>&lt;h1&gt;缓存替换策略&lt;/h1&gt;&lt;h2&gt;LRU(Least Recently Used)&lt;/h2&gt;&lt;p&gt;每个元素维护一个最后一次访问的时间。每次访问一个元素，就更新它最后一次访问的时间。替换的时候，选择最后一次访问的时间最早的那一个元素去替换。&lt;/p&gt;&lt;p&gt;为了优先替换非法元素，非法元素的访问时间视为比合法元素的访问时间都更早。&lt;/p&gt;&lt;h2&gt;PLRU(...&lt;/h2&gt;</description><link>https://jia.je/kb/hardware/cache_replacement_policy.html</link> <pubDate>Thu, 03 Jul 2025 17:05:31 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/hardware/cache_replacement_policy.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/hardware/cache_replacement_policy.png" type="image/png" length="42423" /> </item> <item> <title>缓存替换策略</title> <description>&lt;h1&gt;缓存替换策略&lt;/h1&gt;&lt;h2&gt;LRU(Least Recently Used)&lt;/h2&gt;&lt;p&gt;每个元素维护一个最后一次访问的时间。每次访问一个元素，就更新它最后一次访问的时间。替换的时候，选择最后一次访问的时间最早的那一个元素去替换。&lt;/p&gt;&lt;p&gt;为了优先替换非法元素，非法元素的访问时间视为比合法元素的访问时间都更早。&lt;/p&gt;&lt;h2&gt;PLRU(...&lt;/h2&gt;</description><link>https://jia.je/kb/en/hardware/cache_replacement_policy.html</link> <pubDate>Thu, 03 Jul 2025 17:05:31 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/en/hardware/cache_replacement_policy.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/hardware/cache_replacement_policy.png" type="image/png" length="42423" /> </item> <item> <title>缓存替换策略</title> <description>&lt;h1&gt;缓存替换策略&lt;/h1&gt;&lt;h2&gt;LRU(Least Recently Used)&lt;/h2&gt;&lt;p&gt;每个元素维护一个最后一次访问的时间。每次访问一个元素，就更新它最后一次访问的时间。替换的时候，选择最后一次访问的时间最早的那一个元素去替换。&lt;/p&gt;&lt;p&gt;为了优先替换非法元素，非法元素的访问时间视为比合法元素的访问时间都更早。&lt;/p&gt;&lt;h2&gt;PLRU(...&lt;/h2&gt;</description><link>https://jia.je/kb/hardware/cache_replacement_policy.html</link> <pubDate>Thu, 03 Jul 2025 17:05:31 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/hardware/cache_replacement_policy.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/hardware/cache_replacement_policy.png" type="image/png" length="44009" /> </item> <item> <title>CTF</title> <description>&lt;h1&gt;CTF&lt;/h1&gt;&lt;h2&gt;general&lt;/h2&gt;&lt;h3&gt;return oriented programming&lt;/h3&gt;&lt;p&gt;利用 x86 的特性，可以找到一系列 gadget，几条简单的指令，其中最后一条指令是 ret。在栈溢出的时候，通过构造栈，把要执行的一系列的 gadget 的地址放在栈上，使得函数在返回了以后，会按照顺序执行...&lt;/p&gt;</description><link>https://jia.je/kb/software/ctf.html</link> <pubDate>Sun, 01 Jun 2025 13:28:11 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/software/ctf.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/ctf.png" type="image/png" length="27362" /> </item> <item> <title>CTF</title> <description>&lt;h1&gt;CTF&lt;/h1&gt;&lt;h2&gt;general&lt;/h2&gt;&lt;h3&gt;return oriented programming&lt;/h3&gt;&lt;p&gt;利用 x86 的特性，可以找到一系列 gadget，几条简单的指令，其中最后一条指令是 ret。在栈溢出的时候，通过构造栈，把要执行的一系列的 gadget 的地址放在栈上，使得函数在返回了以后，会按照顺序执行...&lt;/p&gt;</description><link>https://jia.je/kb/en/software/ctf.html</link> <pubDate>Sun, 01 Jun 2025 13:28:11 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/en/software/ctf.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/ctf.png" type="image/png" length="25721" /> </item> <item> <title>CTF</title> <description>&lt;h1&gt;CTF&lt;/h1&gt;&lt;h2&gt;general&lt;/h2&gt;&lt;h3&gt;return oriented programming&lt;/h3&gt;&lt;p&gt;利用 x86 的特性，可以找到一系列 gadget，几条简单的指令，其中最后一条指令是 ret。在栈溢出的时候，通过构造栈，把要执行的一系列的 gadget 的地址放在栈上，使得函数在返回了以后，会按照顺序执行...&lt;/p&gt;</description><link>https://jia.je/kb/software/ctf.html</link> <pubDate>Sun, 01 Jun 2025 13:28:11 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/software/ctf.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/ctf.png" type="image/png" length="27362" /> </item> <item> <title>CPU 漏洞和缓解措施</title> <description>&lt;h1&gt;CPU 漏洞和缓解措施&lt;/h1&gt;&lt;h2&gt;漏洞 Vulnerabilities&lt;/h2&gt;&lt;h3&gt;Spectre&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://spectreattack.com/spectre.pdf&#34;&gt;论文 Spectre Attacks: Exploiting Speculative Execution&lt;/a&gt;&lt;/li&gt;&lt;li&gt;[Reading...&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/kb/hardware/cpu_vulnerabilities.html</link> <pubDate>Sat, 31 May 2025 09:05:30 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/hardware/cpu_vulnerabilities.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/hardware/cpu_vulnerabilities.png" type="image/png" length="51251" /> </item> <item> <title>CPU 漏洞和缓解措施</title> <description>&lt;h1&gt;CPU 漏洞和缓解措施&lt;/h1&gt;&lt;h2&gt;漏洞 Vulnerabilities&lt;/h2&gt;&lt;h3&gt;Spectre&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://spectreattack.com/spectre.pdf&#34;&gt;论文 Spectre Attacks: Exploiting Speculative Execution&lt;/a&gt;&lt;/li&gt;&lt;li&gt;[Reading...&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/kb/en/hardware/cpu_vulnerabilities.html</link> <pubDate>Sat, 31 May 2025 09:05:30 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/en/hardware/cpu_vulnerabilities.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/hardware/cpu_vulnerabilities.png" type="image/png" length="49677" /> </item> <item> <title>CPU 漏洞和缓解措施</title> <description>&lt;h1&gt;CPU 漏洞和缓解措施&lt;/h1&gt;&lt;h2&gt;漏洞 Vulnerabilities&lt;/h2&gt;&lt;h3&gt;Spectre&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://spectreattack.com/spectre.pdf&#34;&gt;论文 Spectre Attacks: Exploiting Speculative Execution&lt;/a&gt;&lt;/li&gt;&lt;li&gt;[Reading...&lt;/li&gt;&lt;/ul&gt;</description><link>https://jia.je/kb/hardware/cpu_vulnerabilities.html</link> <pubDate>Sat, 31 May 2025 09:05:30 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/hardware/cpu_vulnerabilities.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/hardware/cpu_vulnerabilities.png" type="image/png" length="51251" /> </item> <item> <title>SUNRPC 例子</title> <description>&lt;h1&gt;SUNRPC 例子&lt;/h1&gt;&lt;p&gt;下面是一个使用 SUNRPC 实现字符串小写转大写服务的例子。&lt;/p&gt;&lt;p&gt;第一步：编写 RPC 接口：&lt;/p&gt;&lt;p&gt;```shell$ cat test.xprogram TEST_PROG { version TEST_VERS { string TEST(string) =...&lt;/p&gt;</description><link>https://jia.je/kb/software/sunrpc.html</link> <pubDate>Sat, 31 May 2025 04:48:03 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/software/sunrpc.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/sunrpc.png" type="image/png" length="38306" /> </item> <item> <title>SUNRPC 例子</title> <description>&lt;h1&gt;SUNRPC 例子&lt;/h1&gt;&lt;p&gt;下面是一个使用 SUNRPC 实现字符串小写转大写服务的例子。&lt;/p&gt;&lt;p&gt;第一步：编写 RPC 接口：&lt;/p&gt;&lt;p&gt;```shell$ cat test.xprogram TEST_PROG { version TEST_VERS { string TEST(string) =...&lt;/p&gt;</description><link>https://jia.je/kb/en/software/sunrpc.html</link> <pubDate>Sat, 31 May 2025 04:48:03 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/en/software/sunrpc.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/sunrpc.png" type="image/png" length="36710" /> </item> <item> <title>SUNRPC 例子</title> <description>&lt;h1&gt;SUNRPC 例子&lt;/h1&gt;&lt;p&gt;下面是一个使用 SUNRPC 实现字符串小写转大写服务的例子。&lt;/p&gt;&lt;p&gt;第一步：编写 RPC 接口：&lt;/p&gt;&lt;p&gt;```shell$ cat test.xprogram TEST_PROG { version TEST_VERS { string TEST(string) =...&lt;/p&gt;</description><link>https://jia.je/kb/software/sunrpc.html</link> <pubDate>Sat, 31 May 2025 04:48:03 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/software/sunrpc.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/sunrpc.png" type="image/png" length="38306" /> </item> <item> <title>Linux 内存分配器</title> <description>&lt;h1&gt;Linux 内存分配器&lt;/h1&gt;&lt;h2&gt;Linux 5.15&lt;/h2&gt;&lt;p&gt;Linux 5.15 是 Ubuntu 22.04 Jammy 使用的默认内核版本。下面针对 Linux 5.15 的源码，分析它的内存分配器实现。&lt;/p&gt;&lt;p&gt;首先来看 Linux 内核提供了哪些内存分配的 API，参考 [Memory Allocation G...&lt;/p&gt;</description><link>https://jia.je/kb/software/linux_allocator.html</link> <pubDate>Sat, 31 May 2025 03:38:58 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/software/linux_allocator.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/linux_allocator.png" type="image/png" length="39375" /> </item> <item> <title>Linux 内存分配器</title> <description>&lt;h1&gt;Linux 内存分配器&lt;/h1&gt;&lt;h2&gt;Linux 5.15&lt;/h2&gt;&lt;p&gt;Linux 5.15 是 Ubuntu 22.04 Jammy 使用的默认内核版本。下面针对 Linux 5.15 的源码，分析它的内存分配器实现。&lt;/p&gt;&lt;p&gt;首先来看 Linux 内核提供了哪些内存分配的 API，参考 [Memory Allocation G...&lt;/p&gt;</description><link>https://jia.je/kb/en/software/linux_allocator.html</link> <pubDate>Sat, 31 May 2025 03:38:58 +0000</pubDate><source url="https://jia.je/kb/feed_rss_updated.xml">Jiegec's Knowledge Base</source><guid isPermaLink="true">https://jia.je/kb/en/software/linux_allocator.html</guid> <enclosure url="https://jia.je/kb/assets/images/social/software/linux_allocator.png" type="image/png" length="37798" /> </item> </channel></rss>